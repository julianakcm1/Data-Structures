#Insertion Sort
  
  É o algoritmo de ordenação que, dado uma estrutura (array, lista) constrói uma matriz final com um elemento de cada vez, uma inserção 
por vez. Assim como algoritmos de ordenação quadrática.

*Alusão:
  Podemos fazer uma comparação do Insertion Sort com o modo de como algumas pessoas organizam um baralho num jogo de cartas. Imagine 
que você está jogando cartas. Você está com as cartas na mão e elas estão ordenadas. Você recebe uma nova carta e deve colocá-la na 
posição correta da sua mão de cartas, de forma que as cartas obedeçam a ordenação.

A cada nova carta adicionada à sua mão de cartas, a nova carta pode ser menor que algumas das cartas que você já tem na mão ou maior, 
e assim, você começa a comparar a nova carta com todas as cartas na sua mão até encontrar sua posição correta. Você insere a nova carta 
na posição correta, e, novamente, sua mão é composta de cartas totalmente ordenadas. Então, você recebe outra carta e repete o mesmo 
procedimento. Então outra carta, e outra, e assim por diante, até você não receber mais cartas.

*Complexidade:
  Melhor caso: array ordenado -> O(n)
  Pior caso: array em ordem decrescente -> O(n²)
  Médio: O(n²)
  
*Vantagens:
  O mais eficiente para problemas com pequenas entradas, pois é um bom método quando se desejar adicionar poucos elementos em um 
arquivo já ordenado, pois seu custo é linear.
  
*Desvantagens:
  Alto custo de movimentação de elementos no vetor.

*Implementação:

**C**

void insertion_sort (int array[], int size) {
  int i, j, key;
  for (i = 1; i < size; ++i) {
    key = array[i];
    j = i - 1;
    
    while ((j >= 0) && (array[j] > key)) {
      array[j + 1] = array[j];
      --j;
    }
    array[j + 1] = key;
  }
}

**Haskell**

insertion ::(Ord a) => [a] -> [a]
insertion [] = []
insertion (x:xs) = insereOrd x (insercao xs)

insereOrd ::(Ord a) => a -> [a] -> [a]
insereOrd x [] = [x]
insereOrd x (y:ys)
  | x <= y = (x:y:ys)
  | otherwise = y: (insereOrd x ys)
